{
  "version": 3,
  "file": "bundle.css",
  "sources": [
    "..\\..\\Editor.svelte",
    "..\\..\\Press.svelte"
  ],
  "sourcesContent": [
    "<script>\r\n  import TabFiles from \"./TabFiles.svelte\";\r\n  import TabOptions from \"./TabOptions.svelte\";\r\n  import TabMetadata from \"./TabMetadata.svelte\";\r\n  import EditorControls from \"./EditorControls.svelte\";\r\n\r\n  export let book;\r\n\r\n  let views = {\r\n    files: TabFiles,\r\n    options: TabOptions,\r\n    metadata: TabMetadata\r\n  };\r\n\r\n  let currentView = \"options\";\r\n</script>\r\n<style>\r\n.container {\r\n  margin-top: 45px;\r\n}\r\n</style>\r\n\r\n<div class=\"container mt-4 \">\r\n  <ul class=\"nav nav-pills nav-fill\">\r\n    <li\r\n      class=\"nav-item\"\r\n      on:click|preventDefault={() => (currentView = 'options')}>\r\n      <a class=\"nav-link\" class:active={currentView == 'options'} href=\"#\">\r\n        Options\r\n      </a>\r\n    </li>\r\n    <li\r\n      class=\"nav-item\"\r\n      on:click|preventDefault={() => (currentView = 'metadata')}>\r\n      <a class=\"nav-link\" class:active={currentView == 'metadata'} href=\"#\">\r\n        Metadata\r\n      </a>\r\n    </li>\r\n    <li\r\n      class=\"nav-item\"\r\n      on:click|preventDefault={() => (currentView = 'files')}>\r\n      <a class=\"nav-link\" class:active={currentView == 'files'} href=\"#\">\r\n        Files\r\n      </a>\r\n    </li>\r\n  </ul>\r\n  <div class=\"columns tab\">\r\n    <svelte:component this={views[currentView]} {book} />\r\n  </div>\r\n  <EditorControls {book} />\r\n</div>\r\n",
    "<script>\n  import Nav from \"./Nav.svelte\";\n  import Editor from \"./Editor.svelte\";\n  import { getFilesFromDataTransferItems } from \"datatransfer-files-promise\";\n  import { onMount } from \"svelte\";\n  import { processDroppedFiles } from \"./utils.js\";\n\n  let stage = \"waiting\"; // loading, loaded, over\n  let msg, files, book;\n  let error = false;\n\n  function readFile(file) {\n    return new Promise((resolve, reject) => {\n      var fr = new FileReader();\n      fr.onload = () => {\n        resolve(fr.result);\n      };\n      fr.readAsText(file.blob);\n    });\n  }\n\n  onMount(() => {\n    const dropzone = document.querySelector(\".drop-area\");\n    dropzone.addEventListener(\"dragover\", evt => {\n      evt.preventDefault();\n      stage = \"over\";\n    });\n    dropzone.addEventListener(\"dragleave\", evt => {\n      evt.preventDefault();\n      stage = \"waiting\";\n    });\n    dropzone.addEventListener(\"drop\", async evt => {\n      evt.preventDefault();\n\n      msg = \"Getting file list...\";\n      stage = \"loading\";\n      files = await window.getFilesFromDataTransferItems(\n        evt.dataTransfer.items\n      );\n\n      msg = \"Loading configuration...\";\n      book = await processDroppedFiles(files);\n      if (book instanceof Error) {\n        stage = \"error\";\n        msg = book.message;\n      } else {\n        stage = \"loaded\";\n      }\n    });\n  });\n</script>\n\n<style>\n  .over {\n    border: solid 4px #e3f2fd;\n  }\n\n  .action-items {\n    position: fixed;\n    bottom: 0px;\n  }\n\n  .full-height {\n    height: calc(100vh - 48px);\n  }\n</style>\n\n<div\n  class=\"container-fluid p-0 mx-auto full-height drop-area\"\n  >\n\n  <Nav />\n  {#if error}\n    <div class=\"toast\" role=\"alert\" aria-live=\"assertive\" aria-atomic=\"true\">\n      <div class=\"toast-header\">\n        <img src=\"...\" class=\"rounded mr-2\" alt=\"...\" />\n        <strong class=\"mr-auto\">Error</strong>\n        <button\n          type=\"button\"\n          class=\"ml-2 mb-1 close\"\n          data-dismiss=\"toast\"\n          aria-label=\"Close\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"toast-body\">Error initializing filesystem: {error}</div>\n    </div>\n  {/if}\n  {#if stage !== 'loaded'}\n    <div class=\"d-flex justify-content-center align-items-center h-100 text-center\" class:over={stage == 'over'}>\n      {#if stage == 'over'}\n        <div>\n          <div class=\"empty-icon\">\n            <i class=\"fas fa-smile-wink fa-3x\" />\n          </div>\n          <p class=\"empty-title h5\">Drop a book folder here!</p>\n        </div>\n      {:else if stage == 'waiting'}\n        <div>\n          <div class=\"empty-icon\">\n            <i class=\"fas fa-book fa-3x\" />\n          </div>\n          <p class=\"empty-title h5\">The book is empty.</p>\n          <p class=\"empty-subtitle\">\n            Drag &amp; Drop a folder with book data here to start.\n          </p>\n          <div class=\"empty-action\">\n            <button class=\"btn btn-primary\">\n              Learn more about how to build books using\n              <em>little.webby.press</em>\n            </button>\n          </div>\n        </div>\n      {:else if stage == 'loading'}\n        <div>\n          <div class=\"empty-icon\">\n            <i class=\"fas fa-spinner fa-3x fa-spin\" />\n          </div>\n          <p class=\"empty-title h5\">Loading...</p>\n          <p class=\"empty-subtitle\">{msg}</p>\n        </div>\n      {/if}\n    </div>\n  {:else}\n    <Editor {book} />\n  {/if}\n</div>\n"
  ],
  "names": [],
  "mappings": "AAiBA,UAAU,eAAC,CAAC,AACV,UAAU,CAAE,IAAI,AAClB,CAAC;ACkCC,KAAK,cAAC,CAAC,AACL,MAAM,CAAE,KAAK,CAAC,GAAG,CAAC,OAAO,AAC3B,CAAC,AAOD,YAAY,cAAC,CAAC,AACZ,MAAM,CAAE,KAAK,KAAK,CAAC,CAAC,CAAC,IAAI,CAAC,AAC5B,CAAC"
}